- dataset_id: Call_CDR
  dataset_version: '3'
  description: cells per operator_id
  field: OPERATOR_ID
  id: OPERATOR_ID-CELLS_PER_OPERATOR_ID
  id_jira: val-457
  metrics:
  - distribution
  sources: []
  sql: SELECT to_json(collect_list((OPERATOR_ID, result))) AS distribution FROM (select
    OPERATOR_ID, count(*) as result from validation_data_table group by OPERATOR_ID)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: count number of phone_id with more than 24 hours of traffic
  field: PHONE_1_ID
  id: PHONE_1_ID-COUNT_PHONE_ID_WITH_MORE_24H_TRAFFIC
  id_jira: val-458
  metrics:
  - result
  sources: []
  sql: SELECT COUNT(*) AS RESULT FROM (SELECT PHONE_1_ID, SUM(SESSION_DURATION_QT)
    as RESULT FROM validation_data_table GROUP BY PHONE_1_ID) WHERE RESULT > 86400
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: field phone_1_id in entity call_cdr contains prefix or not
  field: PHONE_1_ID
  id: PHONE_1_ID-VALIDATE_NOT_PHONE_PREFIX_IN_NATIONAL_CALLS
  id_jira: val-459
  metrics:
  - result
  sources: []
  sql: Select count(*) as result from validation_data_table where ROAMING_IND != 0
    and (phone_1_id like '+%' or phone_1_id like '00%' or length(phone_1_id) > 9)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: count number of events with duplicated timestamp for the same user
  field: USER_1_ID
  id: USER_1_ID-COUNT_EVENTS_DUPLICATED_TIMESTAMP
  id_jira: val-460
  metrics:
  - result
  sources: []
  sql: SELECT SUM(COUNT) AS RESULT FROM (SELECT EVENT_TM, USER_1_ID, COUNT(EVENT_TM)
    AS COUNT FROM validation_data_table GROUP BY EVENT_TM, USER_1_ID) WHERE COUNT
    > 1
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: count events by user percent<0.25
  field: USER_1_ID
  id: USER_1_ID-PERCENTILE_EVENTS_BY_USER(>=0.25)
  id_jira: val-461
  metrics:
  - result
  sources: []
  sql: SELECT SUM (VALUE) as result FROM (SELECT USER_1_ID, COUNT(*) as VALUE FROM
    validation_data_table GROUP BY USER_1_ID) WHERE VALUE >= (SELECT APPROX_PERCENTILE(VALUE,
    0.25) AS PERCENT FROM (SELECT USER_1_ID, COUNT(*) as VALUE FROM validation_data_table
    GROUP BY USER_1_ID))
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: count events by user percent>0.95
  field: USER_1_ID
  id: USER_1_ID-PERCENTILE_EVENTS_BY_USER(>=0.95)
  id_jira: val-462
  metrics:
  - result
  sources: []
  sql: SELECT SUM (VALUE) as result FROM (SELECT USER_1_ID, COUNT(*) as VALUE FROM
    validation_data_table GROUP BY USER_1_ID) WHERE VALUE >= (SELECT APPROX_PERCENTILE(VALUE,
    0.95) AS PERCENT FROM (SELECT USER_1_ID, COUNT(*) as VALUE FROM validation_data_table
    GROUP BY USER_1_ID))
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: count events by user percent<0.25
  field: USER_1_ID
  id: USER_1_ID-PERCENTILE_EVENTS_BY_USER(<=0.25)
  id_jira: val-463
  metrics:
  - result
  sources: []
  sql: SELECT SUM (VALUE) as result FROM (SELECT USER_1_ID, COUNT(*) as VALUE FROM
    validation_data_table GROUP BY USER_1_ID) WHERE VALUE <= (SELECT APPROX_PERCENTILE(VALUE,
    0.25) AS PERCENT FROM (SELECT USER_1_ID, COUNT(*) as VALUE FROM validation_data_table
    GROUP BY USER_1_ID))
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: number of user_1_id per second level geographical area
  field: USER_1_ID
  id: USER_1_ID-USER_1_ID_PER_SECOND_LEVEL_GEO_AREA
  id_jira: val-464
  metrics:
  - distribution
  sources:
  - dataset_id: D_Geographical_Area
    dataset_version: 3.5.1
    name: D_Geographical_Area
  - dataset_id: D_Geographical_Area_Rel
    dataset_version: 3.5.1
    name: D_Geographical_Area_Rel
  - dataset_id: Cells_Catalogue
    dataset_version: 5.9.0
    name: Cells_Catalogue
  sql: SELECT to_json(collect_list((GROUPED_GEO_AREA_ID, GROUPED_GEO_AREA_NAME, result)))
    AS distribution FROM (SELECT GROUPED_GEO_AREA_ID, GROUPED_GEO_AREA_NAME, COUNT(*)
    as result FROM (SELECT DISTINCT USER_1_ID, GROUPED_GEO_AREA_ID, GROUPED_GEO_AREA_NAME
    FROM validation_data_table P LEFT JOIN (SELECT C.CELL_ID as CELL_ID, L.CHILD_GEO_AREA_ID
    as CHILD_GEO_AREA_ID, L.GROUPED_GEO_AREA_ID as GROUPED_GEO_AREA_ID, G.GEO_AREA_NAME
    as GROUPED_GEO_AREA_NAME FROM Cells_Catalogue C LEFT OUTER JOIN (select CHILD_GEO_AREA_ID,
    (case when (select count(l8) from (Select rh1.CHILD_GEO_AREA_ID AS CHILD_GEO_AREA_ID,
    rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as l2, rh3.PARENT_GEO_AREA_ID
    as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID as l5, rh6.PARENT_GEO_AREA_ID
    as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID as l8 from D_Geographical_Area_Rel
    rh1 left outer join D_Geographical_Area_Rel rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID))
    <> 0 then coalesce(l7, l6, l5, l4, l3, l2, l1) when (select count(l7) from (Select
    rh1.CHILD_GEO_AREA_ID AS CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID
    as l2, rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) <> 0 then coalesce(l6,
    l5, l4, l3, l2, l1) when (select count(l6) <> 0 from (Select rh1.CHILD_GEO_AREA_ID
    AS CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as
    l2, rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) then coalesce(l5, l4,
    l3, l2, l1) when (select count(l5) <> 0 from (Select rh1.CHILD_GEO_AREA_ID AS
    CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as l2,
    rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) then coalesce(l4, l3,
    l2, l1) when (select count(l4) <> 0 from (Select rh1.CHILD_GEO_AREA_ID AS CHILD_GEO_AREA_ID,
    rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as l2, rh3.PARENT_GEO_AREA_ID
    as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID as l5, rh6.PARENT_GEO_AREA_ID
    as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID as l8 from D_Geographical_Area_Rel
    rh1 left outer join D_Geographical_Area_Rel rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID))
    then coalesce(l3, l2, l1) when (select count(l3) from (Select rh1.CHILD_GEO_AREA_ID
    AS CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as
    l2, rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) <> 0 then coalesce(l2,
    l1) else l1 end) AS GROUPED_GEO_AREA_ID from ((Select rh1.CHILD_GEO_AREA_ID AS
    CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as l2,
    rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID))) L ON C.GEO_AREA_ID =
    L.CHILD_GEO_AREA_ID LEFT OUTER JOIN D_Geographical_Area G ON L.GROUPED_GEO_AREA_ID
    = G.GEO_AREA_ID) S ON P.START_CELL_1_ID = S.CELL_ID) GROUP BY GROUPED_GEO_AREA_ID,
    GROUPED_GEO_AREA_NAME)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: count of cells in call_cdr with cells in catalogue per second level
    geo area
  field: START_CELL_1_ID
  id: START_CELL_1_ID-CELLS_ON_EVENTS_WITH_CELLS_CATALOGUE_GEO_AREA
  id_jira: val-465
  metrics:
  - distribution
  sources:
  - dataset_id: D_Geographical_Area
    dataset_version: 3.5.1
    name: D_Geographical_Area
  - dataset_id: D_Geographical_Area_Rel
    dataset_version: 3.5.1
    name: D_Geographical_Area_Rel
  - dataset_id: Cells_Catalogue
    dataset_version: 5.9.0
    name: Cells_Catalogue
  sql: SELECT to_json(collect_list((GROUPED_GEO_AREA_ID, GROUPED_GEO_AREA_NAME, result)))
    AS distribution FROM (SELECT GROUPED_GEO_AREA_ID, GROUPED_GEO_AREA_NAME, COUNT(*)
    as result FROM (SELECT (*) FROM (SELECT DISTINCT START_CELL_1_ID AS MAIN_ID from
    validation_data_table where START_CELL_1_ID IS NOT NULL) P INNER JOIN (SELECT
    DISTINCT CELL_ID AS REFERENCE_ID FROM Cells_Catalogue WHERE CELL_ID IS NOT NULL)
    S ON P.MAIN_ID = S.REFERENCE_ID) P LEFT OUTER JOIN (SELECT C.CELL_ID as CELL_ID,
    L.CHILD_GEO_AREA_ID as CHILD_GEO_AREA_ID, L.GROUPED_GEO_AREA_ID as GROUPED_GEO_AREA_ID,
    G.GEO_AREA_NAME as GROUPED_GEO_AREA_NAME FROM Cells_Catalogue C LEFT OUTER JOIN
    (select CHILD_GEO_AREA_ID, (case when (select count(l8) from (Select rh1.CHILD_GEO_AREA_ID
    AS CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as
    l2, rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) <> 0 then coalesce(l7,
    l6, l5, l4, l3, l2, l1) when (select count(l7) from (Select rh1.CHILD_GEO_AREA_ID
    AS CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as
    l2, rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) <> 0 then coalesce(l6,
    l5, l4, l3, l2, l1) when (select count(l6) <> 0 from (Select rh1.CHILD_GEO_AREA_ID
    AS CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as
    l2, rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) then coalesce(l5, l4,
    l3, l2, l1) when (select count(l5) <> 0 from (Select rh1.CHILD_GEO_AREA_ID AS
    CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as l2,
    rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) then coalesce(l4, l3,
    l2, l1) when (select count(l4) <> 0 from (Select rh1.CHILD_GEO_AREA_ID AS CHILD_GEO_AREA_ID,
    rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as l2, rh3.PARENT_GEO_AREA_ID
    as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID as l5, rh6.PARENT_GEO_AREA_ID
    as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID as l8 from D_Geographical_Area_Rel
    rh1 left outer join D_Geographical_Area_Rel rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID))
    then coalesce(l3, l2, l1) when (select count(l3) from (Select rh1.CHILD_GEO_AREA_ID
    AS CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as
    l2, rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) <> 0 then coalesce(l2,
    l1) else l1 end) AS GROUPED_GEO_AREA_ID from ((Select rh1.CHILD_GEO_AREA_ID AS
    CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as l2,
    rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID))) L ON C.GEO_AREA_ID =
    L.CHILD_GEO_AREA_ID LEFT OUTER JOIN D_Geographical_Area G ON L.GROUPED_GEO_AREA_ID
    = G.GEO_AREA_ID) S ON P.MAIN_ID = S.CELL_ID GROUP BY GROUPED_GEO_AREA_ID, GROUPED_GEO_AREA_NAME)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: cells per lac_id
  field: START_CELL_1_ID
  id: START_CELL_1_ID-CELLS_PER_LAC_ID
  id_jira: val-466
  metrics:
  - distribution
  sources:
  - dataset_id: Cells_Catalogue
    dataset_version: 5.9.0
    name: Cells_Catalogue
  sql: SELECT to_json(collect_list((LAC_ID, RESULT))) AS distribution FROM (SELECT
    LAC_ID,COUNT(*) AS RESULT FROM (SELECT * FROM validation_data_table t1 LEFT OUTER
    JOIN Cells_Catalogue t2 ON t1.START_CELL_1_ID=t2.CELL_ID) GROUP BY LAC_ID)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: cells per site_type_cd
  field: START_CELL_1_ID
  id: START_CELL_1_ID-CELLS_PER_SITE_TYPE_CD
  id_jira: val-467
  metrics:
  - distribution
  sources:
  - dataset_id: Cells_Catalogue
    dataset_version: 5.9.0
    name: Cells_Catalogue
  sql: SELECT to_json(collect_list((SITE_TYPE_CD, RESULT))) AS distribution FROM (SELECT
    SITE_TYPE_CD,COUNT(*) AS RESULT FROM (SELECT * FROM validation_data_table t1 LEFT
    OUTER JOIN Cells_Catalogue t2 ON t1.START_CELL_1_ID=t2.CELL_ID) GROUP BY SITE_TYPE_CD)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: cells per start_cell_1_id
  field: START_CELL_1_ID
  id: START_CELL_1_ID-CELLS_PER_START_CELL_1_ID
  id_jira: val-468
  metrics:
  - distribution
  sources:
  - dataset_id: Cells_Catalogue
    dataset_version: 5.9.0
    name: Cells_Catalogue
  sql: SELECT to_json(collect_list((START_CELL_1_ID, TOTAL))) AS distribution FROM
    (SELECT START_CELL_1_ID,COUNT(*) AS TOTAL FROM (SELECT * FROM validation_data_table
    t1 LEFT OUTER JOIN Cells_Catalogue t2 ON t1.START_CELL_1_ID=t2.CELL_ID) GROUP
    BY START_CELL_1_ID)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: count of cells without events on  call_cdr
  field: START_CELL_1_ID
  id: START_CELL_1_ID-COUNT_CELLS_WITHOUT_EVENT
  id_jira: val-469
  metrics:
  - result
  sources:
  - dataset_id: Cells_Catalogue
    dataset_version: 5.9.0
    name: Cells_Catalogue
  sql: SELECT COUNT(*) as TOTAL FROM (SELECT DISTINCT((CELL_ID)) as MAIN_ID FROM Cells_Catalogue
    WHERE CELL_ID is not null) t1 LEFT OUTER JOIN (SELECT DISTINCT((START_CELL_1_ID))
    as REFERENCE_ID FROM validation_data_table) t2 ON t2.REFERENCE_ID=t1.MAIN_ID WHERE
    t2.REFERENCE_ID is null
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: events per second level geographical area
  field: START_CELL_1_ID
  id: START_CELL_1_ID-EVENTS_PER_SECOND_LEVEL_GEO_AREA
  id_jira: val-470
  metrics:
  - distribution
  sources:
  - dataset_id: D_Geographical_Area
    dataset_version: 3.5.1
    name: D_Geographical_Area
  - dataset_id: D_Geographical_Area_Rel
    dataset_version: 3.5.1
    name: D_Geographical_Area_Rel
  - dataset_id: Cells_Catalogue
    dataset_version: 5.9.0
    name: Cells_Catalogue
  sql: SELECT to_json(collect_list((GROUPED_GEO_AREA_ID, GROUPED_GEO_AREA_NAME, result)))
    AS distribution FROM (SELECT GROUPED_GEO_AREA_ID, GROUPED_GEO_AREA_NAME, COUNT(*)
    as result FROM validation_data_table P LEFT JOIN (SELECT C.CELL_ID as CELL_ID,
    L.CHILD_GEO_AREA_ID as CHILD_GEO_AREA_ID, L.GROUPED_GEO_AREA_ID as GROUPED_GEO_AREA_ID,
    G.GEO_AREA_NAME as GROUPED_GEO_AREA_NAME FROM Cells_Catalogue C LEFT OUTER JOIN
    (select CHILD_GEO_AREA_ID, (case when (select count(l8) from (Select rh1.CHILD_GEO_AREA_ID
    AS CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as
    l2, rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) <> 0 then coalesce(l7,
    l6, l5, l4, l3, l2, l1) when (select count(l7) from (Select rh1.CHILD_GEO_AREA_ID
    AS CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as
    l2, rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) <> 0 then coalesce(l6,
    l5, l4, l3, l2, l1) when (select count(l6) <> 0 from (Select rh1.CHILD_GEO_AREA_ID
    AS CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as
    l2, rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) then coalesce(l5, l4,
    l3, l2, l1) when (select count(l5) <> 0 from (Select rh1.CHILD_GEO_AREA_ID AS
    CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as l2,
    rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) then coalesce(l4, l3,
    l2, l1) when (select count(l4) <> 0 from (Select rh1.CHILD_GEO_AREA_ID AS CHILD_GEO_AREA_ID,
    rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as l2, rh3.PARENT_GEO_AREA_ID
    as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID as l5, rh6.PARENT_GEO_AREA_ID
    as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID as l8 from D_Geographical_Area_Rel
    rh1 left outer join D_Geographical_Area_Rel rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID))
    then coalesce(l3, l2, l1) when (select count(l3) from (Select rh1.CHILD_GEO_AREA_ID
    AS CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as
    l2, rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) <> 0 then coalesce(l2,
    l1) else l1 end) AS GROUPED_GEO_AREA_ID from ((Select rh1.CHILD_GEO_AREA_ID AS
    CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as l2,
    rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID))) L ON C.GEO_AREA_ID =
    L.CHILD_GEO_AREA_ID LEFT OUTER JOIN D_Geographical_Area G ON L.GROUPED_GEO_AREA_ID
    = G.GEO_AREA_ID) S ON P.START_CELL_1_ID = S.CELL_ID GROUP BY GROUPED_GEO_AREA_ID,
    GROUPED_GEO_AREA_NAME)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: spatial difference per start_cell_1_id
  field: START_CELL_1_ID
  id: START_CELL_1_ID-SPATIAL_PER_START_CELL_1_ID
  id_jira: val-471
  metrics:
  - distribution
  sources:
  - dataset_id: D_Geographical_Area
    dataset_version: 3.5.1
    name: D_Geographical_Area
  - dataset_id: D_Geographical_Area_Rel
    dataset_version: 3.5.1
    name: D_Geographical_Area_Rel
  - dataset_id: Cells_Catalogue
    dataset_version: 5.9.0
    name: Cells_Catalogue
  sql: SELECT to_json(collect_list((SITE_TYPE_CD, GROUPED_GEO_AREA_NAME, GROUPED_GEO_AREA_ID,
    result))) AS distribution FROM (SELECT SITE_TYPE_CD, GROUPED_GEO_AREA_NAME, GROUPED_GEO_AREA_ID,
    COUNT(*) as result FROM (SELECT (*) FROM validation_data_table P LEFT JOIN Cells_Catalogue
    S ON P.START_CELL_1_ID = S.CELL_ID) P LEFT JOIN (SELECT C.CELL_ID as CELL_ID,
    L.CHILD_GEO_AREA_ID as CHILD_GEO_AREA_ID, L.GROUPED_GEO_AREA_ID as GROUPED_GEO_AREA_ID,
    G.GEO_AREA_NAME as GROUPED_GEO_AREA_NAME FROM Cells_Catalogue C LEFT OUTER JOIN
    (select CHILD_GEO_AREA_ID, (case when (select count(l8) from (Select rh1.CHILD_GEO_AREA_ID
    AS CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as
    l2, rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) <> 0 then coalesce(l7,
    l6, l5, l4, l3, l2, l1) when (select count(l7) from (Select rh1.CHILD_GEO_AREA_ID
    AS CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as
    l2, rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) <> 0 then coalesce(l6,
    l5, l4, l3, l2, l1) when (select count(l6) <> 0 from (Select rh1.CHILD_GEO_AREA_ID
    AS CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as
    l2, rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) then coalesce(l5, l4,
    l3, l2, l1) when (select count(l5) <> 0 from (Select rh1.CHILD_GEO_AREA_ID AS
    CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as l2,
    rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) then coalesce(l4, l3,
    l2, l1) when (select count(l4) <> 0 from (Select rh1.CHILD_GEO_AREA_ID AS CHILD_GEO_AREA_ID,
    rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as l2, rh3.PARENT_GEO_AREA_ID
    as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID as l5, rh6.PARENT_GEO_AREA_ID
    as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID as l8 from D_Geographical_Area_Rel
    rh1 left outer join D_Geographical_Area_Rel rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID))
    then coalesce(l3, l2, l1) when (select count(l3) from (Select rh1.CHILD_GEO_AREA_ID
    AS CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as
    l2, rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) <> 0 then coalesce(l2,
    l1) else l1 end) AS GROUPED_GEO_AREA_ID from ((Select rh1.CHILD_GEO_AREA_ID AS
    CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as l2,
    rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID))) L ON C.GEO_AREA_ID =
    L.CHILD_GEO_AREA_ID LEFT OUTER JOIN D_Geographical_Area G ON L.GROUPED_GEO_AREA_ID
    = G.GEO_AREA_ID) S ON P.START_CELL_1_ID = S.CELL_ID GROUP BY SITE_TYPE_CD, GROUPED_GEO_AREA_NAME,
    GROUPED_GEO_AREA_ID)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: sum of session_duration when cell_id not cross
  field: START_CELL_1_ID
  id: START_CELL_1_ID-SUM_DURATION_NOT_CROSS_CELL_ID
  id_jira: val-472
  metrics:
  - result
  sources:
  - dataset_id: Cells_Catalogue
    dataset_version: 5.9.0
    name: Cells_Catalogue
  sql: SELECT SUM(A.SESSION_DURATION_QT) AS result FROM validation_data_table A LEFT
    JOIN cells_catalogue B ON A.START_CELL_1_ID = B.CELL_ID WHERE B.CELL_ID IS NULL
    AND A.START_CELL_1_ID IS NOT NULL
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: sum of session_duration when technology_cell_cd not cross
  field: START_CELL_1_ID
  id: START_CELL_1_ID-SUM_DURATION_NOT_CROSS_CELL_CD
  id_jira: val-473
  metrics:
  - result
  sources:
  - dataset_id: Cells_Catalogue
    dataset_version: 5.9.0
    name: Cells_Catalogue
  sql: SELECT NVL(SUM(A.SESSION_DURATION_QT),0) AS result FROM validation_data_table
    A LEFT JOIN cells_catalogue B ON A.START_CELL_1_ID = B.CELL_ID WHERE B.CELL_ID
    IS NOT NULL AND A.START_CELL_1_ID IS NOT NULL AND A.TECHNOLOGY_CELL_CD != B.TECHNOLOGY_CELL_CD
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: field phone_2_id in entity call_cdr contains prefix or not
  field: PHONE_2_ID
  id: PHONE_2_ID-VALIDATE_NOT_PHONE_PREFIX_IN_NATIONAL_CALLS
  id_jira: val-474
  metrics:
  - result
  sources: []
  sql: Select count(*) as result from validation_data_table where ROAMING_IND != 0
    and (phone_2_id like '+%' or phone_2_id like '00%' or length(phone_2_id) > 9)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: count event_tm by hour
  field: EVENT_TM
  id: EVENT_TM-COUNT_EVENTS_BY_HOUR
  id_jira: val-475
  metrics:
  - distribution
  sources: []
  sql: SELECT to_json(collect_list((HOUR,TOTAL))) as distribution FROM (SELECT substring(EVENT_TM,10,2)
    AS HOUR, COUNT(*) AS TOTAL FROM validation_data_table GROUP BY HOUR ORDER BY HOUR)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: sum( session_duration_qt) group by event_tm
  field: SESSION_DURATION_QT
  id: SESSION_DURATION_QT-SUM_DISTRIBUTION
  id_jira: val-476
  metrics:
  - distribution
  sources: []
  sql: SELECT to_json(collect_list((HOUR, TOTAL))) as distribution FROM (SELECT substring(EVENT_TM,10,2)
    AS HOUR, CAST(SUM(SESSION_DURATION_QT) AS DECIMAL(30,5)) AS TOTAL FROM validation_data_table
    GROUP BY HOUR ORDER BY HOUR ASC)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: sum all the values for the column session_duration_qt where direction_cd=1
    and roaming_ind = 0
  field: SESSION_DURATION_QT
  id: SESSION_DURATION_QT-SUM_DURATION_WHERE_DIRECTION_CD_IS_1
  id_jira: val-477
  metrics:
  - result
  sources: []
  sql: Select cast(sum(SESSION_DURATION_QT) as DECIMAL(30,5)) as result from validation_data_table
    where direction_cd=1 and ROAMING_IND = 0
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: sum of all values for column session_duration_qt where  roaming_ind
    = 0
  field: SESSION_DURATION_QT
  id: SESSION_DURATION_QT-SUM_DURATION
  id_jira: val-478
  metrics:
  - result
  sources: []
  sql: Select cast(sum(SESSION_DURATION_QT) as DECIMAL(30,5)) as result from validation_data_table
    where ROAMING_IND = 0
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: sum all the values for the column session_duration_qt where direction_cd=2
    and  roaming_ind = 0
  field: SESSION_DURATION_QT
  id: SESSION_DURATION_QT-SUM_DURATION_WHERE_DIRECTION_CD_IS_0
  id_jira: val-479
  metrics:
  - result
  sources: []
  sql: Select cast(sum(SESSION_DURATION_QT) as DECIMAL(30,5)) as result from validation_data_table
    where direction_cd=2 and ROAMING_IND = 0
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: traffic in cells that are on catalogue
  field: SESSION_DURATION_QT
  id: SESSION_DURATION_QT-SUM_TRAFFIC_IN_CATALOGUE
  id_jira: val-480
  metrics:
  - result
  sources:
  - dataset_id: Cells_Catalogue
    dataset_version: 5.9.0
    name: Cells_Catalogue
  sql: SELECT CAST(SUM(NVL(SESSION_DURATION_QT,0)) AS DECIMAL (30,5)) AS SESSION_DURATION_QT
    FROM (SELECT * FROM validation_data_table t1 INNER JOIN (SELECT DISTINCT((CELL_ID))
    as CELL_ID FROM Cells_Catalogue WHERE CELL_ID is not null) t2 ON t2.CELL_ID=t1.START_CELL_1_ID)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: cells per roaming_ind
  field: ROAMING_IND
  id: ROAMING_IND-CELLS_PER_ROAMING_IND
  id_jira: val-481
  metrics:
  - distribution
  sources: []
  sql: SELECT to_json(collect_list((ROAMING_IND, result))) AS distribution FROM (select
    ROAMING_IND, count(*) as result from validation_data_table group by ROAMING_IND)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: cells per local_technology_cell_des
  field: TECHNOLOGY_CELL_CD
  id: TECHNOLOGY_CELL_CD-CELLS_PER_LOCAL_TECHNOLOGY_CELL_DES
  id_jira: val-482
  metrics:
  - distribution
  sources:
  - dataset_id: D_Technology_Cell
    dataset_version: 3.5.1
    name: D_Technology_Cell
  sql: SELECT to_json(collect_list((LOCAL_TECHNOLOGY_CELL_DES, total))) AS distribution
    FROM (SELECT LOCAL_TECHNOLOGY_CELL_DES,COUNT(*) AS total FROM (SELECT * FROM validation_data_table
    t1 LEFT OUTER JOIN D_Technology_Cell t2 ON t1.TECHNOLOGY_CELL_CD=t2.LOCAL_TECHNOLOGY_CELL_CD)
    GROUP BY LOCAL_TECHNOLOGY_CELL_DES)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: spatial difference per technology_cell_cd
  field: TECHNOLOGY_CELL_CD
  id: TECHNOLOGY_CELL_CD-SPATIAL_PER_TECHNOLOGY_CELL_CD
  id_jira: val-483
  metrics:
  - distribution
  sources:
  - dataset_id: D_Geographical_Area
    dataset_version: 3.5.1
    name: D_Geographical_Area
  - dataset_id: D_Geographical_Area_Rel
    dataset_version: 3.5.1
    name: D_Geographical_Area_Rel
  - dataset_id: D_Technology_Cell
    dataset_version: 3.5.1
    name: D_Technology_Cell
  - dataset_id: Cells_Catalogue
    dataset_version: 5.9.0
    name: Cells_Catalogue
  sql: SELECT to_json(collect_list((LOCAL_TECHNOLOGY_CELL_DES, GROUPED_GEO_AREA_NAME,
    GROUPED_GEO_AREA_ID, result))) AS distribution FROM (SELECT LOCAL_TECHNOLOGY_CELL_DES,
    GROUPED_GEO_AREA_NAME, GROUPED_GEO_AREA_ID, COUNT(*) as result FROM (SELECT (*)
    FROM validation_data_table P LEFT JOIN D_Technology_Cell S ON P.TECHNOLOGY_CELL_CD
    = S.LOCAL_TECHNOLOGY_CELL_CD) P LEFT JOIN (SELECT C.CELL_ID as CELL_ID, L.CHILD_GEO_AREA_ID
    as CHILD_GEO_AREA_ID, L.GROUPED_GEO_AREA_ID as GROUPED_GEO_AREA_ID, G.GEO_AREA_NAME
    as GROUPED_GEO_AREA_NAME FROM Cells_Catalogue C LEFT OUTER JOIN (select CHILD_GEO_AREA_ID,
    (case when (select count(l8) from (Select rh1.CHILD_GEO_AREA_ID AS CHILD_GEO_AREA_ID,
    rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as l2, rh3.PARENT_GEO_AREA_ID
    as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID as l5, rh6.PARENT_GEO_AREA_ID
    as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID as l8 from D_Geographical_Area_Rel
    rh1 left outer join D_Geographical_Area_Rel rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID))
    <> 0 then coalesce(l7, l6, l5, l4, l3, l2, l1) when (select count(l7) from (Select
    rh1.CHILD_GEO_AREA_ID AS CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID
    as l2, rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) <> 0 then coalesce(l6,
    l5, l4, l3, l2, l1) when (select count(l6) <> 0 from (Select rh1.CHILD_GEO_AREA_ID
    AS CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as
    l2, rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) then coalesce(l5, l4,
    l3, l2, l1) when (select count(l5) <> 0 from (Select rh1.CHILD_GEO_AREA_ID AS
    CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as l2,
    rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) then coalesce(l4, l3,
    l2, l1) when (select count(l4) <> 0 from (Select rh1.CHILD_GEO_AREA_ID AS CHILD_GEO_AREA_ID,
    rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as l2, rh3.PARENT_GEO_AREA_ID
    as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID as l5, rh6.PARENT_GEO_AREA_ID
    as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID as l8 from D_Geographical_Area_Rel
    rh1 left outer join D_Geographical_Area_Rel rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID
    left outer join D_Geographical_Area_Rel rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID))
    then coalesce(l3, l2, l1) when (select count(l3) from (Select rh1.CHILD_GEO_AREA_ID
    AS CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as
    l2, rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID)) <> 0 then coalesce(l2,
    l1) else l1 end) AS GROUPED_GEO_AREA_ID from ((Select rh1.CHILD_GEO_AREA_ID AS
    CHILD_GEO_AREA_ID, rh1.PARENT_GEO_AREA_ID  as l1, rh2.PARENT_GEO_AREA_ID as l2,
    rh3.PARENT_GEO_AREA_ID as l3, rh4.PARENT_GEO_AREA_ID as l4, rh5.PARENT_GEO_AREA_ID
    as l5, rh6.PARENT_GEO_AREA_ID as l6, rh7.PARENT_GEO_AREA_ID as l7, rh8.PARENT_GEO_AREA_ID
    as l8 from D_Geographical_Area_Rel rh1 left outer join D_Geographical_Area_Rel
    rh2 on rh1.PARENT_GEO_AREA_ID = rh2.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh3 on rh2.PARENT_GEO_AREA_ID = rh3.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh4 on rh3.PARENT_GEO_AREA_ID = rh4.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh5 on rh4.PARENT_GEO_AREA_ID = rh5.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh6 on rh5.PARENT_GEO_AREA_ID = rh6.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh7 on rh6.PARENT_GEO_AREA_ID = rh7.CHILD_GEO_AREA_ID left outer join D_Geographical_Area_Rel
    rh8 on rh7.PARENT_GEO_AREA_ID = rh8.CHILD_GEO_AREA_ID))) L ON C.GEO_AREA_ID =
    L.CHILD_GEO_AREA_ID LEFT OUTER JOIN D_Geographical_Area G ON L.GROUPED_GEO_AREA_ID
    = G.GEO_AREA_ID) S ON P.START_CELL_1_ID = S.CELL_ID GROUP BY LOCAL_TECHNOLOGY_CELL_DES,
    GROUPED_GEO_AREA_NAME, GROUPED_GEO_AREA_ID)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: cells per country_roaming_cd
  field: COUNTRY_ROAMING_CD
  id: COUNTRY_ROAMING_CD-CELLS_PER_COUNTRY_ROAMING_CD
  id_jira: val-484
  metrics:
  - distribution
  sources: []
  sql: SELECT to_json(collect_list((COUNTRY_ROAMING_CD,result))) AS distribution FROM
    (SELECT COUNTRY_ROAMING_CD, COUNT(DISTINCT(START_CELL_1_ID)) as result FROM validation_data_table
    GROUP BY COUNTRY_ROAMING_CD)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: percentage of users and traffic (minutes) of call_cdr by not telefnica
    users
  field: USER_1_ID
  id: USER_1_ID-NOT_CLIENTS_CALL_CDR_MOBILE_LINE
  id_jira: val-525
  metrics:
  - distribution
  sources:
  - dataset_id: Mobile_Line
    dataset_version: 3.5.1
    name: Mobile_Line
  sql: select to_json(collect_list((pct_no_tef, pct_mins_no_tef))) as distribution
    from (select round((sum(if (msisdn_id is null, 1, 0)) * 100) / count(*), 2) as
    pct_no_tef, round((sum(if (msisdn_id is null, session_duration_qt, 0)) * 100)
    / sum (session_duration_qt), 2) as pct_mins_no_tef from validation_data_table
    left outer join Mobile_Line on phone_1_id=msisdn_id)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: percentage of users and traffic (minutes) of call_cdr by not telefnica
    users
  field: USER_1_ID
  id: USER_1_ID-NOT_CLIENTS_CALL_CDR_MOBILE_REVENUE_MONTHLY
  id_jira: val-526
  metrics:
  - distribution
  sources:
  - dataset_id: Mobile_Revenue_Monthly
    dataset_version: 3.6.0
    name: Mobile_Revenue_Monthly
  sql: select to_json(collect_list((pct_no_tef, pct_mins_no_tef))) as distribution
    from (select round((sum(if (msisdn_id is null, 1, 0)) * 100) / count(*), 2) as
    pct_no_tef, round((sum(if (msisdn_id is null, session_duration_qt, 0)) * 100)
    / sum (session_duration_qt), 2) as pct_mins_no_tef from validation_data_table
    left outer join Mobile_Revenue_Monthly on phone_1_id=msisdn_id)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: traffic asociated to cells that links to terminals that are not from
    this cells
  field: TECHNOLOGY_CELL_CD
  id: TECHNOLOGY_CELL_CD-TRAFFIC_NOT_CROSS_D_TECHNOLOGY_CELL_AND_IMEI_TAC_AND_D_TACS
  id_jira: val-529
  metrics:
  - distribution
  sources:
  - dataset_id: IMEI_TAC
    dataset_version: 3.5.1
    name: IMEI_TAC
  - dataset_id: D_Technology_Cell
    dataset_version: 3.5.1
    name: D_Technology_Cell
  - dataset_id: D_TACS
    dataset_version: 4.0.0
    name: D_TACS
  sql: SELECT to_json(collect_list((TOTAL, INCORRECT, PCT))) AS distribution FROM
    (select TOTAL, INCORRECT, cast(((INCORRECT * 100) / TOTAL) as decimal(3,2)) as
    PCT from (select sum(if(GBL_TECHNOLOGY_CELL_CD > PHONE_TECH, 1, 0)) as INCORRECT,
    count(1) as TOTAL from (select case when TECHNOLOGY_4G_OB_IND = 'LTE' then '4G'
    when TECHNOLOGY_3G_CD != 'No' then '3G' when TECHNOLOGY_2G_CD != 'No' then '2G'
    else '1G' end as PHONE_TECH, TECHNOLOGY_CELL_CD, GBL_TECHNOLOGY_CELL_CD from validation_data_table
    join IMEI_TAC on IMEI_1_ID = IMEI_ID join D_TACS on IMEI_TAC.TAC_ID = D_TACS.TAC_ID
    join D_Technology_Cell on LOCAL_TECHNOLOGY_CELL_CD = TECHNOLOGY_CELL_CD)))
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: events lost in call_cdr - d_tacs
  field: TECHNOLOGY_CELL_CD
  id: TECHNOLOGY_CELL_CD-COUNT_OUTSIDE_OF_TECHNOLOGY_01
  id_jira: val-550
  metrics:
  - result
  sources:
  - dataset_id: IMEI_TAC
    dataset_version: 3.5.1
    name: IMEI_TAC
  sql: select (SELECT count(*) as val1 from validation_data_table) - (SELECT count(*)
    as val2 from (select IMEI_1_ID, TAC_ID, OPERATOR_ID, START_CELL_1_ID, SESSION_DURATION_QT,
    EVENT_TM from validation_data_table left join (select distinct IMEI_ID, TAC_ID
    from IMEI_TAC) on IMEI_1_ID=IMEI_ID where IMEI_1_ID is not null and TAC_ID is
    not null and START_CELL_1_ID is not null)) as result
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: events lost in imei_tac - d_tacs
  field: TECHNOLOGY_CELL_CD
  id: TECHNOLOGY_CELL_CD-COUNT_OUTSIDE_OF_TECHNOLOGY_02
  id_jira: val-551
  metrics:
  - result
  sources:
  - dataset_id: IMEI_TAC
    dataset_version: 3.5.1
    name: IMEI_TAC
  - dataset_id: D_TACS
    dataset_version: 4.0.0
    name: D_TACS
  sql: select (SELECT count(*) as val1 from (select IMEI_1_ID, TAC_ID, OPERATOR_ID,
    START_CELL_1_ID, SESSION_DURATION_QT, EVENT_TM from validation_data_table left
    join (select distinct IMEI_ID, TAC_ID from IMEI_TAC) on IMEI_1_ID=IMEI_ID where
    IMEI_1_ID is not null and TAC_ID is not null and START_CELL_1_ID is not null))
    - (SELECT count(*) as val2 from (select IMEI_1_ID, imeiFilter_1.OPERATOR_ID, TECHNOLOGY_4G_OB_IND,
    TECHNOLOGY_3G_CD, START_CELL_1_ID, SESSION_DURATION_QT, case when TECHNOLOGY_4G_OB_IND
    != 'No LTE' then '4G' when TECHNOLOGY_3G_CD != 'No' then '3G' else '2G' end as
    TECHNOLOGY_TYPE from (select IMEI_1_ID, TAC_ID, OPERATOR_ID, START_CELL_1_ID,
    SESSION_DURATION_QT, EVENT_TM from validation_data_table left join (select distinct
    IMEI_ID, TAC_ID from IMEI_TAC) as imeiFilter on IMEI_1_ID=IMEI_ID where IMEI_1_ID
    is not null and TAC_ID is not null and START_CELL_1_ID is not null) as imeiFilter_1
    left outer join D_TACS on imeiFilter_1.TAC_ID = D_TACS.TAC_ID where TECHNOLOGY_4G_OB_IND
    is not null and TECHNOLOGY_3G_CD is not null)) as result
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: events lost in cells_catalogue - d_technology_cell
  field: TECHNOLOGY_CELL_CD
  id: TECHNOLOGY_CELL_CD-COUNT_OUTSIDE_OF_TECHNOLOGY_03
  id_jira: val-552
  metrics:
  - result
  sources:
  - dataset_id: D_Technology_Cell
    dataset_version: 3.5.1
    name: D_Technology_Cell
  - dataset_id: Cells_Catalogue
    dataset_version: 5.9.0
    name: Cells_Catalogue
  sql: select (SELECT count(*) as val1 from Cells_Catalogue) - (SELECT count(*) as
    val2 from (select CELL_ID, GBL_TECHNOLOGY_CELL_CD, TECHNOLOGY_CELL_CD from Cells_Catalogue
    left outer join D_Technology_Cell on Cells_Catalogue.OPERATOR_ID = D_Technology_Cell.OPERATOR_ID
    and TECHNOLOGY_CELL_CD=LOCAL_TECHNOLOGY_CELL_CD where Cells_Catalogue.CELL_ID
    is not null and GBL_TECHNOLOGY_CELL_CD is not null and CELL_ID is not null)) as
    result
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: events lost due to unknown technology of terminal or cell
  field: TECHNOLOGY_CELL_CD
  id: TECHNOLOGY_CELL_CD-COUNT_OUTSIDE_OF_TECHNOLOGY_04
  id_jira: val-553
  metrics:
  - result
  sources:
  - dataset_id: IMEI_TAC
    dataset_version: 3.5.1
    name: IMEI_TAC
  - dataset_id: D_TACS
    dataset_version: 4.0.0
    name: D_TACS
  - dataset_id: Cells_Catalogue
    dataset_version: 5.9.0
    name: Cells_Catalogue
  sql: select (SELECT count(*) as val1 from (select IMEI_1_ID, imeiFilter_1.OPERATOR_ID,
    TECHNOLOGY_4G_OB_IND, TECHNOLOGY_3G_CD, START_CELL_1_ID, SESSION_DURATION_QT,
    case when TECHNOLOGY_4G_OB_IND != 'No LTE' then '4G' when TECHNOLOGY_3G_CD !=
    'No' then '3G' else '2G' end as TECHNOLOGY_TYPE from (select IMEI_1_ID, TAC_ID,
    OPERATOR_ID, START_CELL_1_ID, SESSION_DURATION_QT, EVENT_TM from validation_data_table
    left join (select distinct IMEI_ID, TAC_ID from IMEI_TAC) as imeiFilter on IMEI_1_ID=IMEI_ID
    where IMEI_1_ID is not null and TAC_ID is not null and START_CELL_1_ID is not
    null) as imeiFilter_1 left outer join D_TACS on imeiFilter_1.TAC_ID = D_TACS.TAC_ID
    where TECHNOLOGY_4G_OB_IND is not null and TECHNOLOGY_3G_CD is not null)) - (SELECT
    count(*) as val2 from (select START_CELL_1_ID, SESSION_DURATION_QT, TECHNOLOGY_TYPE,
    GBL_TECHNOLOGY_CELL_CD, TECHNOLOGY_TYPE < GBL_TECHNOLOGY_CELL_CD as RESULT from
    (select CELL_ID, GBL_TECHNOLOGY_CELL_CD, TECHNOLOGY_CELL_CD from Cells_Catalogue
    left outer join D_Technology_Cell on Cells_Catalogue.OPERATOR_ID = D_Technology_Cell.OPERATOR_ID
    and TECHNOLOGY_CELL_CD=LOCAL_TECHNOLOGY_CELL_CD where Cells_Catalogue.CELL_ID
    is not null and GBL_TECHNOLOGY_CELL_CD is not null and CELL_ID is not null) as
    Cells_Catagoue_filter join (select IMEI_1_ID, tab1.OPERATOR_ID, TECHNOLOGY_4G_OB_IND,
    TECHNOLOGY_3G_CD, START_CELL_1_ID, SESSION_DURATION_QT, case when TECHNOLOGY_4G_OB_IND
    != 'No LTE' then '4G' when TECHNOLOGY_3G_CD != 'No' then '3G' else '2G' end as
    TECHNOLOGY_TYPE from (select IMEI_1_ID, TAC_ID, OPERATOR_ID, START_CELL_1_ID,
    SESSION_DURATION_QT, EVENT_TM from validation_data_table left join (select distinct
    IMEI_ID, TAC_ID from IMEI_TAC) as imeiFilter on IMEI_1_ID=IMEI_ID where IMEI_1_ID
    is not null and TAC_ID is not null and START_CELL_1_ID is not null) as tab1 left
    outer join D_TACS on tab1.TAC_ID = D_TACS.TAC_ID where TECHNOLOGY_4G_OB_IND is
    not null and TECHNOLOGY_3G_CD is not null) as d_tac_filter on CELL_ID = START_CELL_1_ID))
    as result
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: events where terminal_technology < cell_technology can't be analyzed
  field: TECHNOLOGY_CELL_CD
  id: TECHNOLOGY_CELL_CD-COUNT_OUTSIDE_OF_TECHNOLOGY_05
  id_jira: val-554
  metrics:
  - result
  sources:
  - dataset_id: IMEI_TAC
    dataset_version: 3.5.1
    name: IMEI_TAC
  - dataset_id: D_TACS
    dataset_version: 4.0.0
    name: D_TACS
  - dataset_id: Cells_Catalogue
    dataset_version: 5.9.0
    name: Cells_Catalogue
  sql: select (SELECT count(*) as val1 from validation_data_table) - (SELECT count(*)
    as val2 from (select START_CELL_1_ID, SESSION_DURATION_QT, TECHNOLOGY_TYPE, GBL_TECHNOLOGY_CELL_CD,
    TECHNOLOGY_TYPE < GBL_TECHNOLOGY_CELL_CD as RESULT from (select CELL_ID, GBL_TECHNOLOGY_CELL_CD,
    TECHNOLOGY_CELL_CD from Cells_Catalogue left outer join D_Technology_Cell on Cells_Catalogue.OPERATOR_ID
    = D_Technology_Cell.OPERATOR_ID and TECHNOLOGY_CELL_CD=LOCAL_TECHNOLOGY_CELL_CD
    where Cells_Catalogue.CELL_ID is not null and GBL_TECHNOLOGY_CELL_CD is not null
    and CELL_ID is not null) as Cells_Catagoue_filter join (select IMEI_1_ID, imeiFilter_1.OPERATOR_ID,
    TECHNOLOGY_4G_OB_IND, TECHNOLOGY_3G_CD, START_CELL_1_ID, SESSION_DURATION_QT,
    case when TECHNOLOGY_4G_OB_IND != 'No LTE' then '4G' when TECHNOLOGY_3G_CD !=
    'No' then '3G' else '2G' end as TECHNOLOGY_TYPE from (select IMEI_1_ID, TAC_ID,
    OPERATOR_ID, START_CELL_1_ID, SESSION_DURATION_QT, EVENT_TM from validation_data_table
    left join (select distinct IMEI_ID, TAC_ID from IMEI_TAC) as imeiFilter on IMEI_1_ID=IMEI_ID
    where IMEI_1_ID is not null and TAC_ID is not null and START_CELL_1_ID is not
    null) as imeiFilter_1 left outer join D_TACS on imeiFilter_1.TAC_ID = D_TACS.TAC_ID
    where TECHNOLOGY_4G_OB_IND is not null and TECHNOLOGY_3G_CD is not null) as d_tac_filter
    on CELL_ID = START_CELL_1_ID)) as result
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: events where terminal_technology < cell_technology
  field: TECHNOLOGY_CELL_CD
  id: TECHNOLOGY_CELL_CD-COUNT_OUTSIDE_OF_TECHNOLOGY_06
  id_jira: val-555
  metrics:
  - result
  sources:
  - dataset_id: IMEI_TAC
    dataset_version: 3.5.1
    name: IMEI_TAC
  - dataset_id: D_Technology_Cell
    dataset_version: 3.5.1
    name: D_Technology_Cell
  - dataset_id: D_TACS
    dataset_version: 4.0.0
    name: D_TACS
  - dataset_id: Cells_Catalogue
    dataset_version: 5.9.0
    name: Cells_Catalogue
  sql: select count(*) as result from (select START_CELL_1_ID, SESSION_DURATION_QT,
    TECHNOLOGY_TYPE, GBL_TECHNOLOGY_CELL_CD from (select CELL_ID, GBL_TECHNOLOGY_CELL_CD,
    TECHNOLOGY_CELL_CD from Cells_Catalogue left outer join D_Technology_Cell on Cells_Catalogue.OPERATOR_ID
    = D_Technology_Cell.OPERATOR_ID and TECHNOLOGY_CELL_CD=LOCAL_TECHNOLOGY_CELL_CD
    where Cells_Catalogue.CELL_ID is not null and GBL_TECHNOLOGY_CELL_CD is not null
    and CELL_ID is not null) as Cells_Catagoue_filter join (select IMEI_1_ID, imeiFilter_1.OPERATOR_ID,
    TECHNOLOGY_4G_OB_IND, TECHNOLOGY_3G_CD, START_CELL_1_ID, SESSION_DURATION_QT,
    case when TECHNOLOGY_4G_OB_IND != 'No LTE' then '4G' when TECHNOLOGY_3G_CD !=
    'No' then '3G' else '2G' end as TECHNOLOGY_TYPE from (select IMEI_1_ID, TAC_ID,
    OPERATOR_ID, START_CELL_1_ID, SESSION_DURATION_QT, EVENT_TM from validation_data_table
    left join (select distinct IMEI_ID, TAC_ID from IMEI_TAC) as imeiFilter on IMEI_1_ID=IMEI_ID
    where IMEI_1_ID is not null and TAC_ID is not null and START_CELL_1_ID is not
    null) as imeiFilter_1 left outer join D_TACS on imeiFilter_1.TAC_ID = D_TACS.TAC_ID
    where TECHNOLOGY_4G_OB_IND is not null and TECHNOLOGY_3G_CD is not null) as d_tac_filter
    on CELL_ID = START_CELL_1_ID where TECHNOLOGY_TYPE < GBL_TECHNOLOGY_CELL_CD)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: sum(session_duration) where terminal_technology < cell_technology
  field: TECHNOLOGY_CELL_CD
  id: TECHNOLOGY_CELL_CD-COUNT_OUTSIDE_OF_TECHNOLOGY_07
  id_jira: val-556
  metrics:
  - result
  sources:
  - dataset_id: IMEI_TAC
    dataset_version: 3.5.1
    name: IMEI_TAC
  - dataset_id: D_Technology_Cell
    dataset_version: 3.5.1
    name: D_Technology_Cell
  - dataset_id: D_TACS
    dataset_version: 4.0.0
    name: D_TACS
  - dataset_id: Cells_Catalogue
    dataset_version: 5.9.0
    name: Cells_Catalogue
  sql: select sum(SESSION_DURATION_QT) as result from (select START_CELL_1_ID, SESSION_DURATION_QT,
    TECHNOLOGY_TYPE, GBL_TECHNOLOGY_CELL_CD from (select CELL_ID, GBL_TECHNOLOGY_CELL_CD,
    TECHNOLOGY_CELL_CD from Cells_Catalogue left outer join D_Technology_Cell on Cells_Catalogue.OPERATOR_ID
    = D_Technology_Cell.OPERATOR_ID and TECHNOLOGY_CELL_CD=LOCAL_TECHNOLOGY_CELL_CD
    where Cells_Catalogue.CELL_ID is not null and GBL_TECHNOLOGY_CELL_CD is not null
    and CELL_ID is not null) as Cells_Catagoue_filter join (select IMEI_1_ID, imeiFilter_1.OPERATOR_ID,
    TECHNOLOGY_4G_OB_IND, TECHNOLOGY_3G_CD, START_CELL_1_ID, SESSION_DURATION_QT,
    case when TECHNOLOGY_4G_OB_IND != 'No LTE' then '4G' when TECHNOLOGY_3G_CD !=
    'No' then '3G' else '2G' end as TECHNOLOGY_TYPE from (select IMEI_1_ID, TAC_ID,
    OPERATOR_ID, START_CELL_1_ID, SESSION_DURATION_QT, EVENT_TM from validation_data_table
    left join (select distinct IMEI_ID, TAC_ID from IMEI_TAC) as imeiFilter on IMEI_1_ID=IMEI_ID
    where IMEI_1_ID is not null and TAC_ID is not null and START_CELL_1_ID is not
    null) as imeiFilter_1 left outer join D_TACS on imeiFilter_1.TAC_ID = D_TACS.TAC_ID
    where TECHNOLOGY_4G_OB_IND is not null and TECHNOLOGY_3G_CD is not null) as d_tac_filter
    on CELL_ID = START_CELL_1_ID where TECHNOLOGY_TYPE < GBL_TECHNOLOGY_CELL_CD)
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: count of rows in imei_tac that has at least one imei_id with several
    tac_id
  field: TECHNOLOGY_CELL_CD
  id: TECHNOLOGY_CELL_CD-COUNT_OUTSIDE_OF_TECHNOLOGY_08
  id_jira: val-557
  metrics:
  - result
  sources:
  - dataset_id: IMEI_TAC
    dataset_version: 3.5.1
    name: IMEI_TAC
  sql: select (count(distinct IMEI_ID, TAC_ID) - count(distinct IMEI_ID)) as result
    from IMEI_TAC
  type: info
- dataset_id: Call_CDR
  dataset_version: '3'
  description: events where terminal_technology < cell_technology can't be analyzed
  field: TECHNOLOGY_CELL_CD
  id: TECHNOLOGY_CELL_CD-COUNT_OUTSIDE_OF_TECHNOLOGY_09
  id_jira: val-558
  metrics:
  - result
  sources: []
  sql: select count(*) as result from validation_data_table
  type: info
